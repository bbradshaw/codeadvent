// Generated by CoffeeScript 1.12.2
(function() {
  var Recipe, fs, getRecipes, input, leftoverHash, one, takefromLeftovers, two;

  fs = require('fs');

  input = fs.readFileSync('input.txt', 'utf-8');

  Recipe = (function() {
    function Recipe(_str) {
      var j, len, match, product, r, reagents, ref, ref1;
      this._str = _str;
      ref = this._str.split(" => "), reagents = ref[0], product = ref[1];
      this.product = product.split(" ")[1];
      this.amount = Number(product.split(" ")[0]);
      this.reagentList = new Map;
      ref1 = (function() {
        var k, len, ref1, results1;
        ref1 = reagents.split(", ");
        results1 = [];
        for (k = 0, len = ref1.length; k < len; k++) {
          r = ref1[k];
          results1.push(/(\d+) ([^,]+)/.exec(r));
        }
        return results1;
      })();
      for (j = 0, len = ref1.length; j < len; j++) {
        match = ref1[j];
        this.reagentList.set(match[2], Number(match[1]));
      }
    }

    Recipe.prototype.toString = function() {
      return this._str;
    };

    return Recipe;

  })();

  getRecipes = function(input) {
    var j, len, line, recipe, recipes, ref;
    recipes = new Map;
    ref = input.replace(/\n$/, "").split("\n");
    for (j = 0, len = ref.length; j < len; j++) {
      line = ref[j];
      recipe = new Recipe(line);
      recipes.set(recipe.product, recipe);
    }
    return recipes;
  };

  takefromLeftovers = function(shortfall, reagent, leftovers) {
    var amt, kind, leftoverAmts, ref, ref1, took, x;
    leftoverAmts = new Map;
    took = false;
    while (leftovers.length) {
      ref = [leftovers.shift(), leftovers.shift()], amt = ref[0], kind = ref[1];
      leftoverAmts.set(kind, (leftoverAmts.get(kind) || 0) + amt);
    }
    if (leftoverAmts.has(reagent)) {
      if (leftoverAmts.get(reagent) >= shortfall) {
        leftoverAmts.set(reagent, leftoverAmts.get(reagent) - shortfall);
        console.log("    -> taking " + shortfall + " " + reagent + " from extras pile");
        took = true;
      }
    }
    ref1 = leftoverAmts.entries();
    for (x of ref1) {
      kind = x[0], amt = x[1];
      if (amt > 0) {
        leftovers.push(amt);
        leftovers.push(kind);
      }
    }
    return took;
  };

  one = function(input) {
    var extra, leftovers, mult, needAmount, needProductName, needProductRecipe, num, queue, reagent, recipes, ref, results, sum, x;
    recipes = getRecipes(input);
    queue = [1, "FUEL"];
    results = [];
    leftovers = [];
    while (queue.length) {
      needAmount = queue.shift();
      needProductName = queue.shift();
      if (needProductName === "ORE") {
        results.push(needAmount);
        continue;
      }
      if (!recipes.has(needProductName)) {
        throw new Error("Can't figure out how to make " + needProductName + "!");
      }
      needProductRecipe = recipes.get(needProductName);
      mult = Math.floor(needAmount / needProductRecipe.amount) || 1;
      extra = needProductRecipe.amount * mult - needAmount;
      console.log("NEED " + needAmount + " " + needProductName);
      if (!takefromLeftovers(needAmount, needProductName, leftovers)) {
        console.log("  -> using recipe " + needProductRecipe + " " + mult + " times");
        if (extra > 0) {
          leftovers.push(extra);
          leftovers.push(needProductName);
          console.log("    -> producing extra " + extra);
        } else if (extra < 0) {
          queue.push(extra * -1);
          queue.push(needProductName);
          console.log("    -> shortfall of " + (extra * -1));
        }
        ref = needProductRecipe.reagentList.entries();
        for (x of ref) {
          reagent = x[0], num = x[1];
          queue.push(num * mult);
          queue.push(reagent);
        }
      }
    }
    return sum = results.reduce(function(acc, v) {
      return acc + v;
    });
  };

  leftoverHash = function(leftovers) {
    var asStrings, crypto, hash, i, j, k, len, ref, s;
    crypto = require('crypto');
    hash = crypto.createHash('sha1');
    asStrings = [];
    for (i = j = 0, ref = leftovers.length - 1; j < ref; i = j += 2) {
      asStrings.push("" + leftovers[i] + leftovers[i + 1]);
    }
    asStrings.sort();
    for (k = 0, len = asStrings.length; k < len; k++) {
      s = asStrings[k];
      hash.update(s);
    }
    return hash.digest('hex');
  };

  two = function(input) {
    var extra, fuelProduced, hash, leftovers, mult, needAmount, needProductName, needProductRecipe, num, oreUsed, queue, reagent, recipes, ref, seen, totalOreUsed, x;
    recipes = getRecipes(input);
    queue = [1, "FUEL"];
    fuelProduced = 0;
    oreUsed = 0;
    totalOreUsed = 0;
    leftovers = [];
    seen = new Map;
    while (totalOreUsed < 1000000000000) {
      if (!queue.length) {
        queue.push(1);
        queue.push("FUEL");
        fuelProduced += 1;
        hash = leftoverHash(leftovers);
        if (seen.has(hash)) {
          fuelProduced += 1;
          totalOreUsed += seen.get(hash);
        } else {
          seen.set(hash, oreUsed);
          totalOreUsed += oreUsed;
        }
        oreUsed = 0;
      }
      needAmount = queue.shift();
      needProductName = queue.shift();
      if (needProductName === "ORE") {
        oreUsed += needAmount;
        continue;
      }
      needProductRecipe = recipes.get(needProductName);
      mult = Math.floor(needAmount / needProductRecipe.amount) || 1;
      extra = needProductRecipe.amount * mult - needAmount;
      if (!takefromLeftovers(needAmount, needProductName, leftovers)) {
        if (extra > 0) {
          leftovers.push(extra);
          leftovers.push(needProductName);
        } else if (extra < 0) {
          queue.push(extra * -1);
          queue.push(needProductName);
        }
        ref = needProductRecipe.reagentList.entries();
        for (x of ref) {
          reagent = x[0], num = x[1];
          queue.push(num * mult);
          queue.push(reagent);
        }
      }
    }
    return fuelProduced;
  };

  console.log(two("157 ORE => 5 NZVS\n165 ORE => 6 DCFZ\n44 XJWVT, 5 KHKGT, 1 QDVJ, 29 NZVS, 9 GPVTF, 48 HKGWZ => 1 FUEL\n12 HKGWZ, 1 GPVTF, 8 PSHF => 9 QDVJ\n179 ORE => 7 PSHF\n177 ORE => 5 HKGWZ\n7 DCFZ, 7 PSHF => 2 XJWVT\n165 ORE => 2 GPVTF\n3 DCFZ, 7 NZVS, 5 HKGWZ, 10 PSHF => 8 KHKGT"));

}).call(this);

//# sourceMappingURL=solve.js.map
