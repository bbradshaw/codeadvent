{
  "version": 3,
  "file": "solve.js",
  "sourceRoot": "..\\..",
  "sources": [
    "2019\\day14\\solve.coffee"
  ],
  "names": [],
  "mappings": ";AAAA;AAAA,MAAA,MAAA,EAAA,YAAA,EAAA,EAAA,EAAA,UAAA,EAAA,KAAA,EAAA,GAAA,EAAA,gBAAA,EAAA,iBAAA,EAAA;;EAAA,EAAA,GAAK,OAAA,CAAQ,IAAR;;EACL,KAAA,GAAQ,EAAE,CAAC,YAAH,CAAgB,WAAhB,EAA6B,OAA7B;;EAEF,SAAN,MAAA,OAAA;IACI,WAAa,KAAA,CAAA;AACT,UAAA,CAAA,EAAA,GAAA,EAAA,KAAA,EAAA,OAAA,EAAA,CAAA,EAAA,QAAA,EAAA;MADU,IAAC,CAAA;MACX,CAAC,QAAD,EAAW,OAAX,CAAA,GAAsB,IAAC,CAAA,IAAI,CAAC,KAAN,CAAY,MAAZ;MACtB,IAAC,CAAA,OAAD,GAAW,OAAO,CAAC,KAAR,CAAc,GAAd,CAAmB,CAAA,CAAA;MAC9B,IAAC,CAAA,MAAD,GAAU,MAAA,CAAO,OAAO,CAAC,KAAR,CAAc,GAAd,CAAmB,CAAA,CAAA,CAA1B;MACV,IAAC,CAAA,WAAD,GAAe,IAAI;AACnB;;;;;;;;;;MAAA,KAAA,qCAAA;;QACI,IAAC,CAAA,WAAW,CAAC,GAAb,CAAiB,KAAM,CAAA,CAAA,CAAvB,EAA2B,MAAA,CAAO,KAAM,CAAA,CAAA,CAAb,CAA3B;MADJ;IALS;;IAQb,QAAU,CAAA,CAAA;aAAM,IAAC,CAAA;IAAP;;EATd;;EAWA,UAAA,GAAa,QAAA,CAAC,KAAD,CAAA;AACT,QAAA,CAAA,EAAA,GAAA,EAAA,IAAA,EAAA,MAAA,EAAA,OAAA,EAAA;IAAA,OAAA,GAAU,IAAI;AACd;IAAA,KAAA,qCAAA;;MACI,MAAA,GAAS,IAAI,MAAJ,CAAW,IAAX;MACT,OAAO,CAAC,GAAR,CAAY,MAAM,CAAC,OAAnB,EAA4B,MAA5B;IAFJ;WAGA;EALS;;EAOb,iBAAA,GAAoB,QAAA,CAAC,SAAD,EAAY,OAAZ,EAAqB,SAArB,CAAA;AAChB,QAAA,GAAA,EAAA,IAAA,EAAA,YAAA,EAAA,GAAA,EAAA,IAAA,EAAA;IAAA,YAAA,GAAe,IAAI;IACnB,IAAA,GAAO;AACP,WAAM,SAAS,CAAC,MAAhB;MACI,CAAC,GAAD,EAAM,IAAN,CAAA,GAAc,CAAC,SAAS,CAAC,KAAV,CAAA,CAAD,EAAoB,SAAS,CAAC,KAAV,CAAA,CAApB;MACd,YAAY,CAAC,GAAb,CAAiB,IAAjB,EAAuB,CAAC,YAAY,CAAC,GAAb,CAAiB,IAAjB,CAAA,IAA0B,CAA3B,CAAA,GAAgC,GAAvD;IAFJ;IAGA,IAAG,YAAY,CAAC,GAAb,CAAiB,OAAjB,CAAH;MACI,IAAG,YAAY,CAAC,GAAb,CAAiB,OAAjB,CAAA,IAA6B,SAAhC;QACI,YAAY,CAAC,GAAb,CAAiB,OAAjB,EAA0B,YAAY,CAAC,GAAb,CAAiB,OAAjB,CAAA,GAA4B,SAAtD,EAAA;;QAEA,IAAA,GAAO,KAHX;OADJ;;AAKA;IAAA,KAAA,QAAA;MAAI,CAAC,IAAD,EAAO,GAAP;MACA,IAAG,GAAA,GAAM,CAAT;QACI,SAAS,CAAC,IAAV,CAAe,GAAf;QACA,SAAS,CAAC,IAAV,CAAe,IAAf,EAFJ;;IADJ;AAIA,WAAO;EAfS;;EAiBpB,GAAA,GAAM,QAAA,CAAC,KAAD,CAAA;AACF,QAAA,KAAA,EAAA,SAAA,EAAA,IAAA,EAAA,UAAA,EAAA,eAAA,EAAA,iBAAA,EAAA,GAAA,EAAA,KAAA,EAAA,OAAA,EAAA,OAAA,EAAA,GAAA,EAAA,OAAA,EAAA,GAAA,EAAA;IAAA,OAAA,GAAU,UAAA,CAAW,KAAX;IACV,KAAA,GAAQ,CAAC,CAAD,EAAI,MAAJ;IACR,OAAA,GAAU;IACV,SAAA,GAAY;AACZ,WAAM,KAAK,CAAC,MAAZ;MACI,UAAA,GAAa,KAAK,CAAC,KAAN,CAAA;MACb,eAAA,GAAkB,KAAK,CAAC,KAAN,CAAA;MAClB,IAAG,eAAA,KAAmB,KAAtB;QACI,OAAO,CAAC,IAAR,CAAa,UAAb;AACA,iBAFJ;;MAGA,IAAG,CAAI,OAAO,CAAC,GAAR,CAAY,eAAZ,CAAP;QACI,MAAM,IAAI,KAAJ,CAAU,CAAA,6BAAA,CAAA,CAAgC,eAAhC,CAAgD,CAAhD,CAAV,EADV;;MAEA,iBAAA,GAAoB,OAAO,CAAC,GAAR,CAAY,eAAZ;MACpB,IAAA,GAAO,IAAI,CAAC,KAAL,CAAW,UAAA,GAAa,iBAAiB,CAAC,MAA1C,CAAA,IAAqD;MAC5D,KAAA,GAAQ,iBAAiB,CAAC,MAAlB,GAAyB,IAAzB,GAAgC;MACxC,OAAO,CAAC,GAAR,CAAY,CAAA,KAAA,CAAA,CAAQ,UAAR,EAAA,CAAA,CAAsB,eAAtB,CAAA,CAAZ;MACA,IAAG,CAAI,iBAAA,CAAkB,UAAlB,EAA8B,eAA9B,EAA+C,SAA/C,CAAP;QACI,OAAO,CAAC,GAAR,CAAY,CAAA,kBAAA,CAAA,CAAqB,iBAArB,EAAA,CAAA,CAA0C,IAA1C,CAA+C,MAA/C,CAAZ;QACA,IAAI,KAAA,GAAQ,CAAZ;UACI,SAAS,CAAC,IAAV,CAAe,KAAf;UACA,SAAS,CAAC,IAAV,CAAe,eAAf;UACA,OAAO,CAAC,GAAR,CAAY,CAAA,uBAAA,CAAA,CAA0B,KAA1B,CAAA,CAAZ,EAHJ;SAAA,MAIK,IAAI,KAAA,GAAQ,CAAZ;UACD,KAAK,CAAC,IAAN,CAAW,KAAA,GAAM,CAAC,CAAlB;UACA,KAAK,CAAC,IAAN,CAAW,eAAX;UACA,OAAO,CAAC,GAAR,CAAY,CAAA,oBAAA,CAAA,CAAuB,KAAA,GAAM,CAAC,CAA9B,CAAA,CAAZ,EAHC;;AAIL;QAAA,KAAA,QAAA;UAAI,CAAC,OAAD,EAAU,GAAV;UACA,KAAK,CAAC,IAAN,CAAW,GAAA,GAAI,IAAf;UACA,KAAK,CAAC,IAAN,CAAW,OAAX;QAFJ,CAVJ;;IAZJ;WAyBA,GAAA,GAAM,OAAO,CAAC,MAAR,CAAe,QAAA,CAAC,GAAD,EAAK,CAAL,CAAA;aAAW,GAAA,GAAM;IAAjB,CAAf;EA9BJ;;EAgCN,YAAA,GAAe,QAAA,CAAC,EAAD,EAAK,MAAL,EAAa,GAAb,EAAkB,IAAlB,CAAA;AACX,QAAA,QAAA,EAAA;IAAA,IAAG,GAAA,KAAO,IAAV;AACI,aAAO,IADX;;IAEA,QAAA,GAAW,IAAI,CAAC,KAAL,CAAW,CAAC,IAAA,GAAO,GAAR,CAAA,GAAc,CAAzB;IACX,MAAA,GAAS,EAAA,CAAG,QAAH;IACT,IAAG,MAAA,GAAS,MAAZ;MACI,OAAO,CAAC,GAAR,CAAY,CAAA,CAAA,CAAG,QAAH,CAAY,mBAAZ,CAAA,CAAiC,MAAjC,CAAA,CAAZ;AACA,aAAO,YAAA,CAAa,EAAb,EAAiB,MAAjB,EAAyB,GAAzB,EAA8B,QAA9B,EAFX;KAAA,MAGK,IAAG,MAAA,GAAS,MAAZ;MACD,OAAO,CAAC,GAAR,CAAY,CAAA,CAAA,CAAG,QAAH,CAAY,qBAAZ,CAAA,CAAmC,MAAnC,CAAA,CAAZ;AACA,aAAO,YAAA,CAAa,EAAb,EAAiB,MAAjB,EAAyB,QAAA,GAAW,CAApC,EAAuC,IAAvC,EAFN;;AAGL,WAAO;EAXI;;EAaf,gBAAA,GAAmB,QAAA,CAAC,KAAD,EAAQ,CAAR,CAAA;AACf,QAAA,KAAA,EAAA,SAAA,EAAA,IAAA,EAAA,UAAA,EAAA,eAAA,EAAA,iBAAA,EAAA,GAAA,EAAA,SAAA,EAAA,KAAA,EAAA,OAAA,EAAA,OAAA,EAAA,GAAA,EAAA;IAAA,OAAA,GAAU,UAAA,CAAW,KAAX;IACV,KAAA,GAAQ,CAAC,CAAD,EAAI,MAAJ;IACR,SAAA,GAAY;IACZ,SAAA,GAAY;AACZ,WAAM,KAAK,CAAC,MAAZ;MACI,UAAA,GAAa,KAAK,CAAC,KAAN,CAAA;MACb,eAAA,GAAkB,KAAK,CAAC,KAAN,CAAA;MAClB,IAAG,eAAA,KAAmB,KAAtB;QACI,SAAA,IAAa;AACb,iBAFJ;;MAGA,iBAAA,GAAoB,OAAO,CAAC,GAAR,CAAY,eAAZ;MACpB,IAAA,GAAO,IAAI,CAAC,KAAL,CAAW,UAAA,GAAa,iBAAiB,CAAC,MAA1C,CAAA,IAAqD;MAC5D,KAAA,GAAQ,iBAAiB,CAAC,MAAlB,GAAyB,IAAzB,GAAgC;MACxC,IAAG,CAAI,iBAAA,CAAkB,UAAlB,EAA8B,eAA9B,EAA+C,SAA/C,CAAP;QACI,IAAI,KAAA,GAAQ,CAAZ;UACI,SAAS,CAAC,IAAV,CAAe,KAAf;UACA,SAAS,CAAC,IAAV,CAAe,eAAf,EAFJ;SAAA,MAGK,IAAI,KAAA,GAAQ,CAAZ;UACD,KAAK,CAAC,IAAN,CAAW,KAAA,GAAM,CAAC,CAAlB;UACA,KAAK,CAAC,IAAN,CAAW,eAAX,EAFC;;AAGL;QAAA,KAAA,QAAA;UAAI,CAAC,OAAD,EAAU,GAAV;UACA,KAAK,CAAC,IAAN,CAAW,GAAA,GAAI,IAAf;UACA,KAAK,CAAC,IAAN,CAAW,OAAX;QAFJ,CAPJ;;IATJ;WAmBA;EAxBe;;EA0BnB,GAAA,GAAM,QAAA,CAAC,KAAD,CAAA;AACF,QAAA;IAAA,SAAA,GAAY,CAAC,CAAD,CAAA,GAAA;aACR,gBAAA,CAAiB,KAAjB,EAAwB,CAAxB;IADQ;AAEZ,WAAO,YAAA,CAAa,SAAb,EAAwB,aAAxB,EAAuC,OAAvC,EAAgD,QAAhD;EAHL,EA7GN;;;EAoHA,OAAO,CAAC,GAAR,CAAY,GAAA,CAAI,KAAJ,CAAZ;AApHA",
  "sourcesContent": [
    "fs = require 'fs'\ninput = fs.readFileSync 'input.txt', 'utf-8'\n\nclass Recipe\n    constructor: (@_str) ->\n        [reagents, product] = @_str.split(\" => \")\n        @product = product.split(\" \")[1]\n        @amount = Number product.split(\" \")[0]\n        @reagentList = new Map\n        for match in (/(\\d+) ([^,]+)/.exec(r) for r in reagents.split(\", \"))\n            @reagentList.set match[2], Number(match[1])\n    \n    toString: () -> @_str\n\ngetRecipes = (input) ->\n    recipes = new Map\n    for line in input.replace(/\\n$/, \"\").split(\"\\n\")\n        recipe = new Recipe(line)\n        recipes.set(recipe.product, recipe)\n    recipes\n\ntakefromLeftovers = (shortfall, reagent, leftovers) ->\n    leftoverAmts = new Map\n    took = false\n    while leftovers.length\n        [amt, kind] = [leftovers.shift(), leftovers.shift()]\n        leftoverAmts.set(kind, (leftoverAmts.get(kind) or 0) + amt)\n    if leftoverAmts.has(reagent)\n        if leftoverAmts.get(reagent) >= shortfall\n            leftoverAmts.set(reagent, leftoverAmts.get(reagent) - shortfall)\n            #console.log \"    -> taking #{shortfall} #{reagent} from extras pile\"\n            took = true\n    for [kind, amt] from leftoverAmts.entries()\n        if amt > 0\n            leftovers.push(amt)\n            leftovers.push(kind)\n    return took\n\none = (input) ->\n    recipes = getRecipes input\n    queue = [1, \"FUEL\"]\n    results = []\n    leftovers = []\n    while queue.length\n        needAmount = queue.shift()\n        needProductName = queue.shift()\n        if needProductName is \"ORE\"\n            results.push(needAmount)\n            continue\n        if not recipes.has(needProductName)\n            throw new Error \"Can't figure out how to make #{needProductName}!\"\n        needProductRecipe = recipes.get(needProductName)\n        mult = Math.floor(needAmount / needProductRecipe.amount) or 1\n        extra = needProductRecipe.amount*mult - needAmount\n        console.log \"NEED #{needAmount} #{needProductName}\"\n        if not takefromLeftovers(needAmount, needProductName, leftovers)\n            console.log \"  -> using recipe #{needProductRecipe} #{mult} times\"\n            if (extra > 0)\n                leftovers.push extra\n                leftovers.push needProductName\n                console.log \"    -> producing extra #{extra}\"\n            else if (extra < 0)\n                queue.push extra*-1\n                queue.push needProductName\n                console.log \"    -> shortfall of #{extra*-1}\"\n            for [reagent, num] from needProductRecipe.reagentList.entries()\n                queue.push num*mult\n                queue.push reagent\n    sum = results.reduce (acc,v) -> acc + v\n\nbinarysearch = (fn, target, low, high) ->\n    if low is high\n        return low\n    midpoint = Math.floor((high + low) /2)\n    result = fn(midpoint)\n    if result > target\n        console.log \"#{midpoint} produces too much #{result}\"\n        return binarysearch(fn, target, low, midpoint)\n    else if result < target\n        console.log \"#{midpoint} produces too little #{result}\"\n        return binarysearch(fn, target, midpoint + 1, high)\n    return midpoint\n\nsolve_for_n_fuel = (input, n) ->\n    recipes = getRecipes input\n    queue = [n, \"FUEL\"]\n    oreNeeded = 0\n    leftovers = []\n    while queue.length\n        needAmount = queue.shift()\n        needProductName = queue.shift()\n        if needProductName is \"ORE\"\n            oreNeeded += needAmount\n            continue\n        needProductRecipe = recipes.get(needProductName)\n        mult = Math.floor(needAmount / needProductRecipe.amount) or 1\n        extra = needProductRecipe.amount*mult - needAmount\n        if not takefromLeftovers(needAmount, needProductName, leftovers)\n            if (extra > 0)\n                leftovers.push extra\n                leftovers.push needProductName\n            else if (extra < 0)\n                queue.push extra*-1\n                queue.push needProductName\n            for [reagent, num] from needProductRecipe.reagentList.entries()\n                queue.push num*mult\n                queue.push reagent\n    oreNeeded\n\ntwo = (input) ->\n    probSolve = (n) =>\n        solve_for_n_fuel(input, n)\n    return binarysearch(probSolve, 1000000000000, 1600000, 25000000)\n\n\n#console.log one input\nconsole.log two input"
  ]
}