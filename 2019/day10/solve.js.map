{
  "version": 3,
  "file": "solve.js",
  "sourceRoot": "..\\..",
  "sources": [
    "2019\\day10\\solve.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "fs = require('fs')\r\ninput = fs.readFileSync('input.txt', 'utf-8').replace(/\\n$/, \"\");\r\n\r\nfindGCD = (x,y) ->\r\n    x = Math.abs x\r\n    y = Math.abs y\r\n    while y\r\n        remain = x % y\r\n        x = y \r\n        y = remain\r\n    x\r\n\r\nclass AsteroidField\r\n    constructor: (raw) ->\r\n        @grid = (Array.from(line) for line in raw.split(\"\\n\"))\r\n        @names = {}\r\n        @asteroids = @_findAsteroids()\r\n    \r\n    _findAsteroids: () ->\r\n        rs = []\r\n        for row, rn in @grid\r\n            for char, cn in row\r\n                if char is \"#\"\r\n                    rs.push [cn, rn]\r\n            @max_x = cn - 1\r\n        @max_y = rn - 1\r\n        rs\r\n\r\n    print: () ->\r\n        names = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\r\n        n = 0\r\n        b = []\r\n        for row in @grid\r\n            for char in row\r\n                if char is \"#\"\r\n                    b.push(names[n++])\r\n                else\r\n                    b.push(char)\r\n            b.push(\"\\n\")\r\n        console.log(b.join(\"\"))\r\n                    \r\n    asteroidWouldBlock: (start, ex) ->\r\n        dx = ex[0] - start[0]\r\n        dy = ex[1] - start[1]\r\n        gcd = findGCD dx, dy\r\n        slope_x = dx / gcd\r\n        slope_y = dy / gcd\r\n        mult = 1\r\n        loop\r\n            blocked_x = slope_x * mult + ex[0]\r\n            blocked_y = slope_y * mult + ex[1]\r\n            break if (blocked_x > @max_x or blocked_x < 0)\r\n            break if (blocked_y > @max_y or blocked_y < 0)\r\n            mult += 1\r\n            [blocked_x, blocked_y]\r\n    \r\n    otherAsteroids: (thisOne) ->\r\n        (a for a in @asteroids when not @isSame(thisOne, a))\r\n    \r\n    isSame: (a, b) ->\r\n        a[0] is b[0] and a[1] is b[1]\r\n\r\n    solve: () ->\r\n        count = new Map()\r\n        for ast in @asteroids\r\n            blockedVis = []\r\n            view = 0\r\n            for o in @otherAsteroids(ast)\r\n                blockedVis = blockedVis.concat(@asteroidWouldBlock(ast,o))\r\n            for o in @otherAsteroids(ast)\r\n                if not blockedVis.some((z) => @isSame(o,z))\r\n                    view++\r\n            count.set JSON.stringify(ast), view\r\n        most = [count.entries()...].reduce((high, k_v) => if (k_v[1] > high[1]) then k_v else high)\r\n        return most\r\n\r\nout = (a) ->\r\n    console.log JSON.stringify a\r\n\r\none = (i) ->\r\n    f = new AsteroidField(i)\r\n    out(f.solve())\r\n\r\none(input)"
  ]
}