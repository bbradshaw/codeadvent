{
  "version": 3,
  "file": "solve.js",
  "sourceRoot": "..\\..",
  "sources": [
    "2019\\day10\\solve.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "fs = require('fs')\ninput = fs.readFileSync('input.txt', 'utf-8').replace(/\\n$/, \"\");\n\nfindGCD = (x,y) ->\n    x = Math.abs x\n    y = Math.abs y\n    while y\n        remain = x % y\n        x = y \n        y = remain\n    x\n\nclass AsteroidField\n    constructor: (raw) ->\n        @grid = (Array.from(line) for line in raw.split(\"\\n\"))\n        @names = {}\n        @asteroids = @_findAsteroids()\n    \n    _findAsteroids: () ->\n        rs = []\n        for row, rn in @grid\n            for char, cn in row\n                if char is \"#\"\n                    rs.push [cn, rn]\n            @max_x = cn - 1\n        @max_y = rn - 1\n        rs\n\n    print: () ->\n        names = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n        n = 0\n        b = []\n        for row in @grid\n            for char in row\n                if char is \"#\"\n                    b.push(names[n++])\n                else\n                    b.push(char)\n            b.push(\"\\n\")\n        console.log(b.join(\"\"))\n                    \n    asteroidWouldBlock: (start, ex) ->\n        dx = ex[0] - start[0]\n        dy = ex[1] - start[1]\n        gcd = findGCD dx, dy\n        slope_x = dx / gcd\n        slope_y = dy / gcd\n        mult = 1\n        loop\n            blocked_x = slope_x * mult + ex[0]\n            blocked_y = slope_y * mult + ex[1]\n            break if (blocked_x > @max_x or blocked_x < 0)\n            break if (blocked_y > @max_y or blocked_y < 0)\n            mult += 1\n            [blocked_x, blocked_y]\n    \n    otherAsteroids: (thisOne) ->\n        (a for a in @asteroids when not @isSame(thisOne, a))\n    \n    isSame: (a, b) ->\n        a[0] is b[0] and a[1] is b[1]\n\n    solve: () ->\n        count = new Map()\n        for ast in @asteroids\n            blockedVis = []\n            view = 0\n            for o in @otherAsteroids(ast)\n                blockedVis = blockedVis.concat(@asteroidWouldBlock(ast,o))\n            for o in @otherAsteroids(ast)\n                if not blockedVis.some((z) => @isSame(o,z))\n                    view++\n            count.set JSON.stringify(ast), view\n        most = Array.from(count.entries()).reduce((high, k_v) => if (k_v[1] > high[1]) then k_v else high)\n        return most\n\nclass PolarAsteroids\n    constructor: (af, coordinate) ->\n        @xlate = new Map\n        for ast in af.asteroids\n            @relx = ast[0] - coordinate[0] #coordinate[0] - ast[0]\n            @rely = ast[1] - coordinate[1]\n            distance = Math.abs(@relx) + Math.abs(@rely)\n            @xlate.set(JSON.stringify([distance, @relx, @rely]), ast)\n    \n    solve: () ->\n        coordinates = []\n        for coordinate from @xlate.keys()\n            [distance, x, y] = JSON.parse coordinate\n            if x isnt 0 or y isnt 0\n                coordinates.push [distance, x, y]\n        rotation = [new Map, new Map]\n        for [distance, x, y] in coordinates\n            if x >= 0\n                rotation[0].set y/x, []\n            else\n                rotation[1].set y/x, []\n        angles = [Array.from(rotation[0].keys()), Array.from(rotation[1].keys())]\n        angles[0].sort( (a,b) => b-a)\n        angles[1].sort( (a,b) => a-b)\n        for [distance, x, y] in coordinates\n            if x >= 0\n                rotation[0].get(y/x).push([distance,x,y])\n            else\n                rotation[1].get(y/x).push [distance,x,y]\n        for i in [0..1]\n            for ang in angles[i]\n                rotation[i].get(ang).sort((a,b) => a[0] - b[0])\n        console.log \"total angles: #{angles[0].length+angles[1].length}\"\n        asteroidDestroyed = 0\n        while asteroidDestroyed < 201\n            for i in [0..1]\n                for angle in angles[i]\n                    nxt = rotation[i].get(angle).shift()\n                    if nxt?\n                        asteroidDestroyed++\n                        console.log \"asteroid at relative coord [#{JSON.stringify @xlate.get JSON.stringify nxt}] destroyed (#{asteroidDestroyed}) with slope #{angle}\"\n                        if asteroidDestroyed == 200\n                            return @xlate.get JSON.stringify nxt\n                console.log \"next half\"\n\none = (i) ->\n    f = new AsteroidField(i)\n    return f.solve()\n\ntwo = (i, x, y) ->\n    f = new AsteroidField(i)\n\n    p = new PolarAsteroids(f, [x,y])\n    ans = p.solve()\n    return ans[0]*100 + ans[1]\n\n\nans = one(input)\nconsole.log ans\nstart = JSON.parse ans[0]\ntwo input, start[0], start[1]\n#two input, 11, 13\n"
  ]
}