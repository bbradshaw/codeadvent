{
  "version": 3,
  "file": "solve.js",
  "sourceRoot": "..\\..",
  "sources": [
    "2019\\day15\\solve.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "class CPU\r\n    constructor: (program) ->\r\n        @ip = 0\r\n        @rel_base = 0\r\n        @should_run = true\r\n        @program = @parseProgram(program)\r\n        @callbacks = {}\r\n    \r\n    parseProgram: (input) ->\r\n        Number(x) for x in input.replace(/\\n$/, \"\").split(',')\r\n\r\n    run: ->\r\n        doRun = () =>\r\n            if @should_run\r\n                @step()\r\n                setImmediate doRun\r\n        setImmediate doRun\r\n\r\n    getMem: (loc) ->\r\n        if @program[loc]?\r\n            return @program[loc]\r\n        return 0\r\n    \r\n    setMem: (loc, val) ->\r\n        @program[loc] = val\r\n\r\n    error: (err) ->\r\n        if @callbacks.error?()\r\n            callback.error(err)\r\n        else\r\n            throw new Error err\r\n\r\n    input: -> \r\n        if not @callbacks.input?\r\n            @error(\"no input callback and input required\")\r\n        @callbacks.input (err, data) ->\r\n            if err?\r\n                @error err\r\n            return data\r\n\r\n    output: (out) -> \r\n        if@callbacks.output?\r\n            @callbacks.output out\r\n        else\r\n            console.log(\"  Output: #{out}\")\r\n\r\n    on: (evtName, cb) ->\r\n        @callbacks[evtName] = cb\r\n    \r\n    halt: ->\r\n        @should_run = false\r\n        if @callbacks.halt?\r\n            @callbacks.halt @ip\r\n        else\r\n            console.log(\"halted!\")\r\n    \r\n    parameter: (pos) ->\r\n        this_mode = @mode[pos]\r\n        switch this_mode\r\n            when 0 then @getMem(@getMem(@ip + pos))\r\n            when 1 then @getMem(@ip + pos)\r\n            when 2 then @getMem(@getMem(@ip + pos) + @rel_base)\r\n            else @error(\"Unknown parameter mode #{this_mode}\")\r\n    \r\n    setParameter: (pos, val) ->\r\n        this_mode = @mode[pos]\r\n        switch this_mode\r\n            when 0 then @setMem @getMem(@ip + pos), val\r\n            when 2 then @setMem(@getMem(@ip + pos) + @rel_base, val)\r\n            else @error(\"Unknown setParameter mode #{this_mode}\")\r\n\r\n    decodeOpcode: ->\r\n        raw = @getMem(@ip).toString().padStart(5, '0')\r\n        opcode = Number(raw[3..])\r\n        modes = \r\n            1 : Number(raw[2])\r\n            2 : Number(raw[1])\r\n            3 : Number(raw[0])\r\n        return [opcode, modes]\r\n    \r\n    step: ->\r\n        [opcode, @mode] = @decodeOpcode()\r\n        switch opcode\r\n            when 1\r\n                @setParameter(3, @parameter(1) + @parameter(2))\r\n                @ip += 4\r\n            when 2\r\n                @setParameter(3, @parameter(1) * @parameter(2))\r\n                @ip += 4\r\n            when 3\r\n                @setParameter(1, @input())\r\n                @ip += 2\r\n            when 4\r\n                @output(@parameter(1))\r\n                @ip += 2\r\n            when 5\r\n                if @parameter(1) isnt 0\r\n                    @ip = @parameter(2)\r\n                else\r\n                    @ip += 3\r\n            when 6\r\n                if @parameter(1) is 0\r\n                    @ip = @parameter(2)\r\n                else\r\n                    @ip += 3\r\n            when 7\r\n                if @parameter(1) < @parameter(2)\r\n                    @setParameter(3, 1)\r\n                else\r\n                    @setParameter(3, 0)\r\n                @ip += 4\r\n            when 8\r\n                if @parameter(1) is @parameter(2)\r\n                    @setParameter(3, 1)\r\n                else\r\n                    @setParameter(3, 0)\r\n                @ip += 4\r\n            when 9\r\n                @rel_base += @parameter(1)\r\n                @ip += 2\r\n            when 99\r\n                @halt()\r\n            else @error(\"Unknown opcode #{opcode} at position #{@ip}!\")\r\n\r\nclass roboController\r\n    constructor: ->\r\n        @rx = 0\r\n        @ry = 0\r\n        @lastMove = null\r\n        @map = new Map\r\n        @max = [null, null]\r\n        @min = [null, null]\r\n        @back = new Map\r\n        @target = null\r\n    \r\n    direction: (cmd) ->\r\n        switch(cmd)\r\n            when 1 then [0,  1]\r\n            when 2 then [0, -1]\r\n            when 3 then [-1, 0]\r\n            when 4 then [1,  0]\r\n    \r\n    getCmdToGoTo: (start, end) ->\r\n        switch\r\n            when start[0] > end[0] then 3\r\n            when start[0] < end[0] then 4\r\n            when start[1] > end[1] then 2\r\n            when start[1] < end[1] then 1\r\n\r\n    go: (cmd, roboInputCb) ->\r\n        @lastMove = @direction cmd\r\n        roboInputCb null, cmd\r\n    \r\n    nextPosition: ->\r\n        [@rx + @lastMove[0], @ry + @lastMove[1]]\r\n    \r\n    confirmMove: ->\r\n        [prevX, prevY] = [@rx, @ry]\r\n        [@rx, @ry] = @nextPosition()\r\n        if not @back.has(@_serial([@rx, @ry]) )\r\n            @back.set @_serial([@rx, @ry]), [prevX, prevY]\r\n        if not @max[0]? or @rx > @max[0]\r\n            @max[0] = @rx\r\n        if not @max[1]? or @ry > @max[1]\r\n            @max[1] = @ry\r\n        if not @min[0]? or @rx < @min[0]\r\n            @min[0] = @rx\r\n        if not @min[1]? or @ry < @min[1]\r\n            @min[1] = @ry    \r\n    \r\n    _serial: (pos) -> \"#{pos[0]},#{pos[1]}\"\r\n\r\n    markExplored: (type) ->\r\n        if type is \"O\"\r\n            @target = @nextPosition()\r\n        @map.set @_serial(@nextPosition()), type\r\n\r\n    choose: ->\r\n        for dir in [1,2,3,4]\r\n            vec = @direction dir\r\n            if not @map.has @_serial [vec[0] + @rx, vec[1] + @ry]\r\n                return dir\r\n        prev_place = @back.get(@_serial [@rx, @ry])\r\n        @getCmdToGoTo([@rx, @ry], prev_place)\r\n    \r\n    printMap: ->\r\n        for y in [@max[1]..@min[1]]\r\n            line = []\r\n            for x in [@min[0]..@max[1]]\r\n                if x is @rx and y is @ry\r\n                    line.push \"R\"\r\n                else\r\n                    line.push @map.get @_serial([x,y]) or \" \"\r\n            console.log line.join(\"\")\r\n        null\r\n    \r\n    isDone : ->\r\n        if @rx is 0 and @ry is 0\r\n            for vec in [[0,  1]\r\n                        [0, -1]\r\n                        [-1, 0]\r\n                        [1,  0]]\r\n                if not @_serial vec in @map\r\n                    return false\r\n            return true\r\n\r\nneighbors = (control, sp) ->\r\n    p = (Number(c) for c in sp.split \",\")\r\n    s = control._serial\r\n    nowall = []\r\n    for i in [1..4]\r\n        vec = control.direction i\r\n        test = [p[0] + vec[0], p[1] + vec[1]]\r\n        if control.map.get(s test) isnt \"#\"\r\n            nowall.push test\r\n    nowall\r\n\r\na_star = (start, control) ->\r\n    goal = control.target\r\n    heuristic = (p) ->\r\n        Math.abs(goal[1] - p[1]) + Math.abs(goal[0] - p[0])\r\n    path = (end) ->\r\n        steps = 0\r\n        cur = end\r\n        while cameFrom.has(cur)\r\n            cur = cameFrom.get(cur)\r\n            steps += 1\r\n        steps\r\n    s = control._serial\r\n    visited = new Set [s start]\r\n    cameFrom = new Map\r\n    g = new Map\r\n    f = new Map\r\n    f.set s(start), heuristic(start)\r\n    g.set s(start), 0\r\n\r\n    while visited.size\r\n        cur = Array.from(visited).reduce( (acc,k) =>  if f[k] < f[acc] then k else acc)\r\n        if cur is s goal\r\n            return path cur\r\n        visited.delete(cur)\r\n        for candidate in neighbors(control, cur)\r\n            calc_g = g.get(cur) + 1\r\n            serCan = s candidate\r\n            if (g.has(serCan) and g.get(serCan) > calc_g) or (not g.has(serCan))\r\n                cameFrom.set(serCan, cur)\r\n                g.set serCan, calc_g\r\n                f.set serCan, g.get(serCan) + heuristic(candidate)\r\n                if serCan not in visited\r\n                    visited.add serCan\r\n    throw new Error \"Failed to find path!\"\r\n\r\nfill = (control) ->\r\n    time = 0\r\n    s = control._serial\r\n    oxygen = new Set [s control.target]\r\n    vacuumLen = (v for v from control.map.values() when v is \".\").length\r\n\r\n    vacuumLen += 1 #start\r\n    while oxygen.size < vacuumLen\r\n        time += 1\r\n        nowoxygen = Array.from(oxygen)\r\n        for spot from nowoxygen\r\n            for nowall in neighbors(control, spot)\r\n                oxygen.add s nowall\r\n    time\r\n    \r\nfs = require 'fs'\r\ninput = fs.readFileSync 'input.txt', 'utf-8'\r\n\r\none = (input, answerCB) ->\r\n    robo = new CPU input\r\n    control = new roboController\r\n    robo.on 'output', (data) ->\r\n        switch data\r\n            when 0\r\n                #console.log \"hit wall at #{control.nextPosition()}!\"\r\n                control.markExplored \"#\"\r\n            when 1\r\n                #console.log \"moved to #{control.nextPosition()}!\"\r\n                control.markExplored \".\"\r\n                control.confirmMove()\r\n                if control.isDone()\r\n                    robo.halt()\r\n                    if not control.target?\r\n                        throw new Error \"Robo failed to find target!\"\r\n                    answerCB a_star([0,0], control)\r\n            when 2\r\n                console.log \"found mcguffin at #{control.nextPosition()}!\"\r\n                control.markExplored \"O\"\r\n                control.confirmMove()\r\n    \r\n    robo.on 'input', (cb) ->\r\n        way = control.choose()\r\n        control.go way, cb\r\n\r\n    robo.on 'halt', (ip) ->\r\n        control.printMap()\r\n    \r\n    robo.run()\r\n\r\n\r\n\r\n\r\ntwo = (input, answerCB) ->\r\n    robo = new CPU input\r\n    control = new roboController\r\n    robo.on 'output', (data) ->\r\n        switch data\r\n            when 0\r\n                #console.log \"hit wall at #{control.nextPosition()}!\"\r\n                control.markExplored \"#\"\r\n            when 1\r\n                #console.log \"moved to #{control.nextPosition()}!\"\r\n                control.markExplored \".\"\r\n                control.confirmMove()\r\n                if control.isDone()\r\n                    robo.halt()\r\n                    if not control.target?\r\n                        throw new Error \"Robo failed to find target!\"\r\n                    answerCB fill(control)\r\n            when 2\r\n                console.log \"found mcguffin at #{control.nextPosition()}!\"\r\n                control.markExplored \"O\"\r\n                control.confirmMove()\r\n    \r\n    robo.on 'input', (cb) ->\r\n        way = control.choose()\r\n        control.go way, cb\r\n\r\n    robo.on 'halt', (ip) ->\r\n        control.printMap()\r\n    \r\n    robo.run()\r\n\r\none input, (answer) ->\r\n    console.log answer\r\n\r\ntwo input, (answer) ->\r\n    console.log answer"
  ]
}