{
  "version": 3,
  "file": "solve.js",
  "sourceRoot": "..\\..",
  "sources": [
    "2019\\day11\\solve.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "fs = require('fs')\r\ninput = fs.readFileSync 'input.txt', 'utf-8'\r\n\r\nparseInput = (input) ->\r\n    Number(x) for x in input.replace(/\\n$/, \"\").split(',')\r\n\r\nsparseArrayWithDefault = (_default) ->\r\n    @extra_keys = {}\r\n    @get = (obj, prop) ->\r\n        if prop >= obj.length\r\n            if prop in @extra_keys\r\n                return @extra_keys[prop]\r\n            else\r\n                return _default\r\n        else\r\n            return obj[prop]\r\n    \r\n    @set = (obj, key, val) ->\r\n        if key >= obj.length\r\n            @extra_keys[key] = val\r\n        else\r\n            obj[key] = val\r\n        true\r\n\r\nclass InputWaitError extends Error\r\n\r\nclass CPU\r\n    constructor: (program) ->\r\n        @ip = 0\r\n        @rel_base = 0\r\n        @should_run = true\r\n        @program = new Proxy([program...], new sparseArrayWithDefault(0))\r\n        @_input = []\r\n        @_output = []\r\n\r\n    input: -> \r\n        if not @_input.length\r\n            throw new InputWaitError(\"Empty input!\")\r\n        return @_input.shift()\r\n    \r\n    output: -> @_output.shift()\r\n\r\n    hasOutput: -> !!@_output.length\r\n\r\n    sendInput: (i) ->\r\n        @_input.push(i)\r\n        this\r\n\r\n    sendOutput: (o) ->\r\n        #console.log(\"    Output: #{o}\")\r\n        @_output.push(o)\r\n    \r\n    parameter: (pos) ->\r\n        this_mode = @mode[pos]\r\n        switch this_mode\r\n            when 0 then @program[@program[@ip + pos]]\r\n            when 1 then @program[@ip + pos]\r\n            when 2 then @program[@program[@ip + pos] + @rel_base]\r\n            else throw new Error(\"Unknown parameter mode #{this_mode}\")\r\n    \r\n    setParameter: (pos, val) ->\r\n        this_mode = @mode[pos]\r\n        switch this_mode\r\n            when 0 then @program[@program[@ip + pos]] = val\r\n            when 2 then @program[@program[@ip + pos] + @rel_base] = val\r\n            else throw new Error(\"Unknown setParameter mode #{this_mode}\")\r\n\r\n    decodeOpcode: ->\r\n        raw = @program[@ip].toString().padStart(5, '0')\r\n        opcode = Number(raw[3..])\r\n        modes = \r\n            1 : Number(raw[2])\r\n            2 : Number(raw[1])\r\n            3 : Number(raw[0])\r\n        return [opcode, modes]\r\n    \r\n    step: ->\r\n        [opcode, @mode] = @decodeOpcode()\r\n        switch opcode\r\n            when 1\r\n                @setParameter(3, @parameter(1) + @parameter(2))\r\n                @ip += 4\r\n            when 2\r\n                @setParameter(3, @parameter(1) * @parameter(2))\r\n                @ip += 4\r\n            when 3\r\n                @setParameter(1, @input())\r\n                @ip += 2\r\n            when 4\r\n                @sendOutput(@parameter(1))\r\n                @ip += 2\r\n            when 5\r\n                if @parameter(1) isnt 0\r\n                    @ip = @parameter(2)\r\n                else\r\n                    @ip += 3\r\n            when 6\r\n                if @parameter(1) is 0\r\n                    @ip = @parameter(2)\r\n                else\r\n                    @ip += 3\r\n            when 7\r\n                if @parameter(1) < @parameter(2)\r\n                    @setParameter(3, 1)\r\n                else\r\n                    @setParameter(3, 0)\r\n                @ip += 4\r\n            when 8\r\n                if @parameter(1) is @parameter(2)\r\n                    @setParameter(3, 1)\r\n                else\r\n                    @setParameter(3, 0)\r\n                @ip += 4\r\n            when 9\r\n                @rel_base += @parameter(1)\r\n                @ip += 2\r\n            when 99\r\n                @should_run = false\r\n                console.log(\"halted!\")\r\n            else throw new Error(\"Unknown opcode #{opcode} at position #{@ip}!\")\r\n\r\nclass PaintGrid\r\n    constructor: () ->\r\n        @map = new Map()\r\n    \r\n    get: (x, y) ->\r\n        serial = \"#{x},#{y}\"\r\n        if @map.has serial\r\n            @map.get serial\r\n        else\r\n            \".\"\r\n    \r\n    set: (x, y, val) ->\r\n        console.log(\"painting #{x}, #{y} to #{val}\")\r\n        @map.set \"#{x},#{y}\", val\r\n    \r\n    print: ->\r\n        highest_y = -Infinity\r\n        lowest_y = Infinity\r\n        highest_x = -Infinity\r\n        lowest_x = Infinity\r\n        for k from @map.keys()\r\n            [x,y] = (Number(n) for n in k.split(\",\"))\r\n            if x > highest_x\r\n                highest_x = x \r\n            else if x < lowest_x\r\n                lowest_x = x \r\n            if y > highest_y\r\n                highest_y = y \r\n            else if y < lowest_y \r\n                lowest_y = y \r\n        for y in [highest_y+1..lowest_y-1]\r\n            lb = []\r\n            for x in [lowest_x..highest_x]\r\n                lb.push(@get(x,y))\r\n            console.log(lb.join(\"\"))\r\n    \r\nclass Direction\r\n    constructor: () ->\r\n        @current = [0,1]\r\n\r\n    left : ->\r\n        switch\r\n            when @current[0] is 0 and @current[1] is 1\r\n                @current = [-1, 0]\r\n            when @current[0] is -1 and @current[1] is 0\r\n                @current = [0, -1]\r\n            when @current[0] is 0 and @current[1] is -1\r\n                @current = [1, 0]\r\n            when @current[0] is 1 and @current[1] is 0\r\n                @current = [0, 1]\r\n\r\n    right : ->\r\n        switch\r\n            when @current[0] is 0 and @current[1] is 1\r\n                @current = [1, 0]\r\n            when @current[0] is 1 and @current[1] is 0\r\n                @current = [0, -1]\r\n            when @current[0] is 0 and @current[1] is -1\r\n                @current = [-1, 0]\r\n            when @current[0] is -1 and @current[1] is 0\r\n                @current = [0, 1]\r\n\r\n    name : ->\r\n        switch\r\n            when @current[0] is 0 and @current[1] is 1\r\n                \"Up\"\r\n            when @current[0] is 1 and @current[1] is 0\r\n                \"Right\"\r\n            when @current[0] is 0 and @current[1] is -1\r\n                \"Down\"\r\n            when @current[0] is -1 and @current[1] is 0\r\n                \"Left\"\r\n\r\nclass Robot\r\n    constructor: (program) ->\r\n        @grid = new PaintGrid\r\n        @dir = new Direction\r\n        @cpu = new CPU(program)\r\n        @pos = [0,0]\r\n    \r\n    runCPU: (stopCondition = null) ->\r\n        while @cpu.should_run\r\n            @cpu.step()\r\n            if stopCondition?()\r\n                return\r\n        throw Error(\"CPU stopped unexpectedly!\")\r\n\r\n    step: ->\r\n        try\r\n            @runCPU()\r\n        catch error\r\n            if not (error instanceof InputWaitError)\r\n                throw error                \r\n        color = switch @grid.get(@pos[0], @pos[1])\r\n            when \".\" then 0\r\n            else 1\r\n        @cpu.sendInput(color)\r\n        @runCPU(() => @cpu.hasOutput())\r\n        new_color = @cpu.output()\r\n        @grid.set(@pos[0], @pos[1], switch new_color\r\n            when 0 then \".\"\r\n            else \"#\")\r\n        @runCPU(() => @cpu.hasOutput())\r\n        switch @cpu.output()\r\n            when 0 then @dir.left()\r\n            else @dir.right()\r\n        @pos = [@dir.current[0] + @pos[0], @dir.current[1] + @pos[1]]\r\n        #console.log \"turning #{@dir.name()} to pos #{@pos[0]}, #{@pos[1]}\"\r\n\r\n    should_run: ->\r\n        @cpu.should_run\r\n\r\none = (input) ->\r\n    robo = new Robot(input)\r\n    try\r\n        while robo.should_run\r\n            robo.step()\r\n    Array.from(robo.grid.map.keys()).length\r\n\r\ntwo = (input) ->\r\n    robo = new Robot(input)\r\n    robo.grid.set(0,0,\"#\")\r\n    try\r\n        while robo.should_run\r\n            robo.step()\r\n    robo.grid.print()\r\n\r\nconsole.log(one(parseInput(input)))\r\ntwo(parseInput(input))"
  ]
}