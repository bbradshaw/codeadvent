{
  "version": 3,
  "file": "solve.js",
  "sourceRoot": "..\\..",
  "sources": [
    "2019\\day17\\solve.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "class CPU\r\n    constructor: (program) ->\r\n        @ip = 0\r\n        @rel_base = 0\r\n        @should_run = true\r\n        @program = @parseProgram(program)\r\n        @callbacks = {}\r\n    \r\n    parseProgram: (input) ->\r\n        Number(x) for x in input.replace(/\\n$/, \"\").split(',')\r\n\r\n    run: ->\r\n        doRun = () =>\r\n            if @should_run\r\n                @step()\r\n                setImmediate doRun\r\n        setImmediate doRun\r\n\r\n    getMem: (loc) ->\r\n        if @program[loc]?\r\n            return @program[loc]\r\n        return 0\r\n    \r\n    setMem: (loc, val) ->\r\n        @program[loc] = val\r\n\r\n    error: (err) ->\r\n        if @callbacks.error?()\r\n            callback.error(err)\r\n        else\r\n            throw new Error err\r\n\r\n    input: -> \r\n        if not @callbacks.input?\r\n            @error(\"no input callback and input required\")\r\n        @callbacks.input (err, data) ->\r\n            if err?\r\n                @error err\r\n            return data\r\n\r\n    output: (out) -> \r\n        if@callbacks.output?\r\n            @callbacks.output out\r\n        else\r\n            console.log(\"  Output: #{out}\")\r\n\r\n    on: (evtName, cb) ->\r\n        @callbacks[evtName] = cb\r\n    \r\n    halt: ->\r\n        @should_run = false\r\n        if @callbacks.halt?\r\n            @callbacks.halt @ip\r\n        else\r\n            console.log(\"halted!\")\r\n    \r\n    parameter: (pos) ->\r\n        this_mode = @mode[pos]\r\n        switch this_mode\r\n            when 0 then @getMem(@getMem(@ip + pos))\r\n            when 1 then @getMem(@ip + pos)\r\n            when 2 then @getMem(@getMem(@ip + pos) + @rel_base)\r\n            else @error(\"Unknown parameter mode #{this_mode}\")\r\n    \r\n    setParameter: (pos, val) ->\r\n        this_mode = @mode[pos]\r\n        switch this_mode\r\n            when 0 then @setMem @getMem(@ip + pos), val\r\n            when 2 then @setMem(@getMem(@ip + pos) + @rel_base, val)\r\n            else @error(\"Unknown setParameter mode #{this_mode}\")\r\n\r\n    decodeOpcode: ->\r\n        raw = @getMem(@ip).toString().padStart(5, '0')\r\n        opcode = Number(raw[3..])\r\n        modes = \r\n            1 : Number(raw[2])\r\n            2 : Number(raw[1])\r\n            3 : Number(raw[0])\r\n        return [opcode, modes]\r\n    \r\n    step: ->\r\n        [opcode, @mode] = @decodeOpcode()\r\n        switch opcode\r\n            when 1\r\n                @setParameter(3, @parameter(1) + @parameter(2))\r\n                @ip += 4\r\n            when 2\r\n                @setParameter(3, @parameter(1) * @parameter(2))\r\n                @ip += 4\r\n            when 3\r\n                @setParameter(1, @input())\r\n                @ip += 2\r\n            when 4\r\n                @output(@parameter(1))\r\n                @ip += 2\r\n            when 5\r\n                if @parameter(1) isnt 0\r\n                    @ip = @parameter(2)\r\n                else\r\n                    @ip += 3\r\n            when 6\r\n                if @parameter(1) is 0\r\n                    @ip = @parameter(2)\r\n                else\r\n                    @ip += 3\r\n            when 7\r\n                if @parameter(1) < @parameter(2)\r\n                    @setParameter(3, 1)\r\n                else\r\n                    @setParameter(3, 0)\r\n                @ip += 4\r\n            when 8\r\n                if @parameter(1) is @parameter(2)\r\n                    @setParameter(3, 1)\r\n                else\r\n                    @setParameter(3, 0)\r\n                @ip += 4\r\n            when 9\r\n                @rel_base += @parameter(1)\r\n                @ip += 2\r\n            when 99\r\n                @halt()\r\n            else @error(\"Unknown opcode #{opcode} at position #{@ip}!\")\r\n\r\nclass RoboController\r\n    constructor: ->\r\n        @rows = new Map\r\n        @max_y = 0\r\n        @max_x = 0\r\n    \r\n    get: (x, y) ->\r\n        @rows.get(y)?[x]\r\n    \r\n    set: (x, y, val) ->\r\n        if not @rows.has y\r\n            @rows.set y, []\r\n        r = @rows.get y\r\n        r[x] = val\r\n        if x > @max_x\r\n            @max_x = x \r\n        if y > @max_y\r\n            @max_y = y\r\n    \r\n    travel: ->\r\n        for y in [0..@max_y]\r\n            for x in [0..@max_x]\r\n                yield [x,y]\r\n    \r\n    print: ->\r\n        for y in [0..@max_y]\r\n            buffer = []\r\n            for x in [0..@max_x]\r\n                buffer.push @get(x,y)\r\n            console.log(buffer.join \"\")\r\n    \r\n    neighbors: (x, y, filter) ->\r\n        a = []\r\n        for [dx, dy] in [[1,0], [-1, 0], [0,1], [0,-1]]\r\n            [npx, npy] = [x + dx, y + dy]\r\n            if @get(npx, npy)? and filter(npx, npy)\r\n                a.push [npx, npy]\r\n        a\r\n\r\n    findIntersections: ->\r\n        sect = []\r\n        for y in [0..@max_y]\r\n            for x in [0..@max_x]\r\n                if c = @get(x, y) is \"#\"\r\n                    n = @neighbors x, y, (tx, ty) =>\r\n                        @get(tx, ty) is \"#\"\r\n                    if n.length is 4\r\n                        sect.push [x,y]\r\n        sect\r\n\r\noutputHandler = (g) ->\r\n    y = 0\r\n    x = 0\r\n    (chrCode) ->\r\n        if chrCode is 10\r\n            y++\r\n            x = 0\r\n        else\r\n            g.set(x, y, String.fromCharCode(chrCode))\r\n            x++\r\n\r\ndfs = (graph, v) ->\r\n    work = []\r\n    visited = new Set\r\n    fromWhere = new Map\r\n    answer = []\r\n    work.push v\r\n    valid = (px, py) =>\r\n        graph.get(px, py) isnt \".\"\r\n    while work.length\r\n        v = work.pop()\r\n        if not visited.has \"#{v}\"\r\n            visited.add \"#{v}\"\r\n            answer.push v\r\n            for n in graph.neighbors v..., valid\r\n                work.push n\r\n                fromWhere.set \"#{n}\", \"#{v}\"\r\n    answer\r\n\r\none = (input, answerCB) ->\r\n    cpu = new CPU(input)\r\n    control = new RoboController\r\n\r\n    cpu.on 'output', outputHandler(control)\r\n    cpu.on 'halt', () ->\r\n        answer = 0\r\n        for [ix, iy] in control.findIntersections()\r\n            control.set(ix, iy, \"O\")\r\n            answer += ix * iy\r\n        control.print()\r\n        answerCB answer\r\n    cpu.run()\r\n\r\ntwo = (input, answerCB) ->\r\n    cpu = new CPU(input)\r\n    control = new RoboController\r\n\r\n    cpu.on 'output', outputHandler(control)\r\n    cpu.on 'halt', () ->\r\n        start = null\r\n        for [x,y] from control.travel()\r\n            if control.get(x, y) is \"^\"\r\n                start = [x,y]\r\n                break\r\n        buf = []\r\n        for [x, y] in dfs(control, start)\r\n            buf.push \"#{[x,y]}\"\r\n        console.log buf.join \" -> \"\r\n    cpu.run()\r\n\r\nfs = require 'fs'\r\ninput = fs.readFileSync 'input.txt', 'utf-8'\r\n\r\n#one input, (ans) ->\r\n#    console.log ans\r\n\r\ntwo input "
  ]
}