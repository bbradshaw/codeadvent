{
  "version": 3,
  "file": "solve.js",
  "sourceRoot": "..\\..",
  "sources": [
    "2019\\day12\\solve.coffee"
  ],
  "names": [],
  "mappings": ";AAAA;AAAA,MAAA,IAAA,EAAA,OAAA,EAAA,YAAA,EAAA,UAAA,EAAA,OAAA,EAAA,OAAA,EAAA,aAAA,EAAA,KAAA,EAAA,GAAA,EAAA,QAAA,EAAA,QAAA,EAAA;;EAAA,KAAA,GAAQ;;EAKR,OAAA,GAAU,QAAA,CAAC,CAAD,EAAG,CAAH,CAAA;AACN,QAAA;IAAA,CAAA,GAAI,IAAI,CAAC,GAAL,CAAS,CAAT;IACJ,CAAA,GAAI,IAAI,CAAC,GAAL,CAAS,CAAT;AACJ,WAAM,CAAN;MACI,MAAA,GAAS,CAAA,GAAI;MACb,CAAA,GAAI;MACJ,CAAA,GAAI;IAHR;WAIA;EAPM;;EASV,OAAA,GAAU,QAAA,CAAC,CAAD,EAAG,CAAH,CAAA;WACN,CAAA,GAAE,CAAF,GAAM,OAAA,CAAQ,CAAR,EAAU,CAAV;EADA;;EAGJ,UAAN,MAAA,QAAA;IACI,WAAa,MAAM,CAAN,OAAc,CAAd,MAAsB,CAAtB,CAAA;MAAC,IAAC,CAAA;MAAO,IAAC,CAAA;MAAO,IAAC,CAAA;IAAlB;;IAEb,GAAK,CAAC,GAAD,CAAA;MACD,IAAC,CAAA,CAAD,GAAK,GAAG,CAAC;MACT,IAAC,CAAA,CAAD,GAAK,GAAG,CAAC;aACT,IAAC,CAAA,CAAD,GAAK,GAAG,CAAC;IAHR;;IAKL,GAAK,CAAC,GAAD,CAAA;aAAS,IAAI,OAAJ,CAAY,IAAC,CAAA,CAAD,GAAK,GAAG,CAAC,CAArB,EAAwB,IAAC,CAAA,CAAD,GAAK,GAAG,CAAC,CAAjC,EAAoC,IAAC,CAAA,CAAD,GAAK,GAAG,CAAC,CAA7C;IAAT;;EART;;EAUM,OAAN,MAAA,KAAA;IACI,WAAa,IAAA,CAAA;MAAC,IAAC,CAAA;MACX,IAAC,CAAA,GAAD,GAAO,IAAI;IADF;;IAGb,IAAM,CAAA,CAAA;aACF,IAAI,CAAC,GAAL,CAAS,IAAC,CAAA,GAAG,CAAC,CAAd,CAAA,GAAmB,IAAI,CAAC,GAAL,CAAS,IAAC,CAAA,GAAG,CAAC,CAAd,CAAnB,GAAsC,IAAI,CAAC,GAAL,CAAS,IAAC,CAAA,GAAG,CAAC,CAAd;IADpC;;IAGN,IAAM,CAAA,CAAA;aACF,IAAI,CAAC,GAAL,CAAS,IAAC,CAAA,GAAG,CAAC,CAAd,CAAA,GAAmB,IAAI,CAAC,GAAL,CAAS,IAAC,CAAA,GAAG,CAAC,CAAd,CAAnB,GAAsC,IAAI,CAAC,GAAL,CAAS,IAAC,CAAA,GAAG,CAAC,CAAd;IADpC;;EAPV;;EAUA,QAAA,GAAW,QAAA,CAAC,GAAD,CAAA;AACP,QAAA;IAAA,CAAA,GAAI,mCAAmC,CAAC,IAApC,CAAyC,GAAzC;WACJ,IAAI,OAAJ,CAAY,MAAA,CAAO,CAAE,CAAA,CAAA,CAAT,CAAZ,EAA0B,MAAA,CAAO,CAAE,CAAA,CAAA,CAAT,CAA1B,EAAwC,MAAA,CAAO,CAAE,CAAA,CAAA,CAAT,CAAxC;EAFO;;EAIX,YAAA,GAAe,QAAA,CAAC,KAAD,CAAA;WACX;EADW;;EAGf,aAAA,GAAgB,QAAA,CAAC,EAAD,EAAK,EAAL,CAAA;AACZ,QAAA,GAAA,EAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,CAAA,EAAA,GAAA,EAAA;AAAA;AAAA;IAAA,KAAA,qCAAA;;MACI,GAAA,GAAM,CAAC,EAAE,CAAC,GAAI,CAAA,CAAA,CAAP,GAAY,EAAE,CAAC,GAAI,CAAA,CAAA,CAApB,CAAA,GAA0B;;;AAChC;AAAA;QAAA,KAAA,wCAAA;;UACI,IAAG,GAAA,GAAM,CAAC,CAAC,GAAI,CAAA,CAAA,CAAf;YACI,CAAC,CAAC,GAAI,CAAA,CAAA,CAAN,IAAY,EADhB;;UAEA,IAAG,GAAA,GAAM,CAAC,CAAC,GAAI,CAAA,CAAA,CAAf;0BACI,CAAC,CAAC,GAAI,CAAA,CAAA,CAAN,IAAY,GADhB;WAAA,MAAA;kCAAA;;QAHJ,CAAA;;;IAFJ,CAAA;;EADY;;EAShB,QAAA,GAAW,QAAA,CAAC,MAAD,EAAS,CAAT,CAAA;AACP,QAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,KAAA,EAAA,GAAA,EAAA,OAAA,EAAA;IAAA,KAAA,GAAQ,YAAA,CAAa,MAAb;AACR;IAAA,KAAY,kFAAZ;MACI,KAAA,uCAAA;;QACI,aAAA,CAAc,IAAK,CAAA,CAAA,CAAnB,EAAuB,IAAK,CAAA,CAAA,CAA5B;MADJ;;;AAEA;QAAA,KAAA,0CAAA;;wBACI,IAAI,CAAC,GAAG,CAAC,GAAT,CAAa,IAAI,CAAC,GAAG,CAAC,GAAT,CAAa,IAAI,CAAC,GAAlB,CAAb;QADJ,CAAA;;;IAHJ,CAAA;;EAFO;;EAQX,UAAA,GAAa,QAAA,CAAC,MAAD,CAAA;AACT,QAAA,MAAA,EAAA,SAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,CAAA,EAAA,IAAA,EAAA,KAAA,EAAA,GAAA,EAAA,CAAA,EAAA,IAAA,EAAA,KAAA,EAAA,SAAA,EAAA;IAAA,KAAA,GAAQ,YAAA,CAAa,MAAb;IACR,IAAA,GAAO,CAAA;AACP;IAAA,KAAA,qCAAA;;MACI,IAAK,CAAA,SAAA,CAAL,GAAkB,IAAI;IAD1B;IAEA,SAAA,GAAY,QAAA,CAAC,GAAD,EAAM,CAAN,CAAA;AACR,UAAA,CAAA,EAAA,IAAA,EAAA,CAAA,EAAA;MAAA,CAAA,GAAI;MACJ,KAAA,uCAAA;;QACI,CAAA,IAAI,CAAA,CAAA,CAAG,CAAC,CAAC,GAAI,CAAA,CAAA,CAAT,CAAY,CAAZ,CAAA,CAAe,CAAC,CAAC,GAAI,CAAA,CAAA,CAArB,CAAwB,CAAxB;MADR;aAEA;IAJQ;IAKZ,MAAA,GAAS,CAAA;IACT,KAAY,sCAAZ;MACI,KAAA,yCAAA;;QACI,aAAA,CAAc,IAAK,CAAA,CAAA,CAAnB,EAAuB,IAAK,CAAA,CAAA,CAA5B;MADJ;MAEA,KAAA,0CAAA;;QACI,IAAI,CAAC,GAAG,CAAC,GAAT,CAAa,IAAI,CAAC,GAAG,CAAC,GAAT,CAAa,IAAI,CAAC,GAAlB,CAAb;MADJ;MAEA,KAAA,iBAAA;;QACI,CAAA,GAAI,SAAA,CAAU,MAAV,EAAkB,SAAlB;QACJ,IAAG,KAAK,CAAC,GAAN,CAAU,CAAV,CAAH;UACI,MAAO,CAAA,SAAA,CAAP,GAAoB;UACpB,OAAO,IAAK,CAAA,SAAA;UACZ,OAAO,CAAC,GAAR,CAAY,CAAA,CAAA,CAAG,SAAH,CAAa,YAAb,CAAA,CAA2B,IAA3B,CAAgC,CAAhC,CAAZ,EAHJ;;QAIA,KAAK,CAAC,GAAN,CAAU,CAAV;MANJ;MAOA,IAAG,MAAM,CAAC,IAAP,CAAY,IAAZ,CAAiB,CAAC,MAAlB,GAA2B,CAA9B;AACI,cADJ;;IAZJ;AAcA,WAAO;EAzBE;;EA2Bb,GAAA,GAAM,QAAA,CAAC,OAAD,CAAA;AACF,QAAA,CAAA,EAAA,IAAA,EAAA,GAAA,EAAA;IAAA,MAAA;;AAAgC;MAAA,KAAA,yCAAA;;qBAAtB,IAAI,IAAJ,CAAS,QAAA,CAAS,CAAT,CAAT;MAAsB,CAAA;;;IAChC,QAAA,CAAS,MAAT,EAAiB,IAAjB;IACA,GAAA;;AAAiC;MAAA,KAAA,wCAAA;;qBAA1B,IAAI,CAAC,IAAL,CAAA,CAAA,GAAc,IAAI,CAAC,IAAL,CAAA;MAAY,CAAA;;;WACjC,GAAG,CAAC,MAAJ,CAAW,QAAA,CAAC,GAAD,EAAM,CAAN,CAAA;aACP,GAAA,GAAM;IADC,CAAX,EAEE,CAFF;EAJE;;EAQN,GAAA,GAAM,QAAA,CAAC,OAAD,CAAA;AACF,QAAA,MAAA,EAAA,CAAA,EAAA;IAAA,MAAA;;AAAgC;MAAA,KAAA,yCAAA;;qBAAtB,IAAI,IAAJ,CAAS,QAAA,CAAS,CAAT,CAAT;MAAsB,CAAA;;;IAChC,MAAA,GAAS,UAAA,CAAW,MAAX;AACT,WAAO,OAAA,CAAQ,OAAA,CAAQ,MAAM,CAAC,CAAf,EAAkB,MAAM,CAAC,CAAzB,CAAR,EAAqC,MAAM,CAAC,CAA5C;EAHL,EAhGN;;;EAuGA,OAAO,CAAC,GAAR,CAAY,GAAA,CAAI,KAAK,CAAC,KAAN,CAAY,IAAZ,CAAJ,CAAZ;AAvGA",
  "sourcesContent": [
    "input = \"\"\"<x=3, y=15, z=8>\r\n<x=5, y=-1, z=-2>\r\n<x=-10, y=8, z=2>\r\n<x=8, y=4, z=-5>\"\"\"\r\n\r\nfindGCD = (x,y) ->\r\n    x = Math.abs x\r\n    y = Math.abs y\r\n    while y\r\n        remain = x % y\r\n        x = y \r\n        y = remain\r\n    x\r\n\r\nfindLCM = (x,y) ->\r\n    x*y / findGCD(x,y)\r\n\r\nclass Vector3\r\n    constructor: (@x = 0, @y = 0, @z = 0) ->\r\n\r\n    set: (vec) ->\r\n        @x = vec.x\r\n        @y = vec.y\r\n        @z = vec.z\r\n    \r\n    add: (vec) -> new Vector3(@x + vec.x, @y + vec.y, @z + vec.z)\r\n   \r\nclass Moon\r\n    constructor: (@pos) ->\r\n        @vel = new Vector3\r\n    \r\n    pnrg: ->\r\n        Math.abs(@pos.x) + Math.abs(@pos.y) + Math.abs(@pos.z)\r\n\r\n    knrg: ->\r\n        Math.abs(@vel.x) + Math.abs(@vel.y) + Math.abs(@vel.z)\r\n\r\nparseVec = (str) ->\r\n    m = /<x=([^,]+), y=([^,]+), z=([^,]+)>/.exec(str)\r\n    new Vector3(Number(m[1]), Number(m[2]), Number(m[3]))\r\n\r\ncombinations = (array) ->\r\n    `array.reduce( (acc, v, i) => acc.concat(array.slice(i+1).map( w => [v,w])), [])`\r\n\r\ngravityAdjust = (m1, m2) ->\r\n    for d in ['x', 'y', 'z']\r\n        avg = (m1.pos[d] + m2.pos[d]) / 2\r\n        for m in [m1, m2]\r\n            if avg > m.pos[d]\r\n                m.vel[d] += 1\r\n            if avg < m.pos[d]\r\n                m.vel[d] -= 1\r\n\r\nsimulate = (system, n) ->\r\n    pairs = combinations(system)\r\n    for step in [0...n]\r\n        for pair in pairs\r\n            gravityAdjust(pair[0], pair[1])\r\n        for moon in system\r\n            moon.pos.set(moon.pos.add(moon.vel))\r\n\r\nfindCommon = (system) ->\r\n    pairs = combinations(system)\r\n    seen = {}\r\n    for dimension in ['x', 'y', 'z']\r\n        seen[dimension] = new Set\r\n    serialize = (sys, d) ->\r\n        r = \"\"\r\n        for m in sys\r\n            r+= \"#{m.pos[d]},#{m.vel[d]},\"\r\n        r\r\n    answer = {}\r\n    for step in [0...10000000]\r\n        for pair in pairs\r\n            gravityAdjust pair[0], pair[1]\r\n        for moon in system\r\n            moon.pos.set(moon.pos.add(moon.vel))\r\n        for dimension, seenD of seen\r\n            s = serialize(system, dimension)\r\n            if seenD.has(s)\r\n                answer[dimension] = step\r\n                delete seen[dimension]\r\n                console.log \"#{dimension} repeats at #{step}!\"\r\n            seenD.add(s)\r\n        if Object.keys(seen).length < 1\r\n            break\r\n    return answer\r\n\r\none = (problem) ->\r\n    system = (new Moon(parseVec(l)) for l in problem)\r\n    simulate(system, 1000)\r\n    nrg = (moon.pnrg() * moon.knrg() for moon in system)\r\n    nrg.reduce (acc, v) ->\r\n        acc + v\r\n    , 0\r\n\r\ntwo = (problem) ->\r\n    system = (new Moon(parseVec(l)) for l in problem)\r\n    answer = findCommon system\r\n    return findLCM findLCM(answer.x, answer.y), answer.z\r\n\r\n\r\n#console.log(one(input.split(\"\\n\")))\r\nconsole.log(two(input.split(\"\\n\")))"
  ]
}