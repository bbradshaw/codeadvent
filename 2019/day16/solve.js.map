{
  "version": 3,
  "file": "solve.js",
  "sourceRoot": "..\\..",
  "sources": [
    "2019\\day16\\solve.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "input = \"59796737047664322543488505082147966997246465580805791578417462788780740484409625674676660947541571448910007002821454068945653911486140823168233915285229075374000888029977800341663586046622003620770361738270014246730936046471831804308263177331723460787712423587453725840042234550299991238029307205348958992794024402253747340630378944672300874691478631846617861255015770298699407254311889484508545861264449878984624330324228278057377313029802505376260196904213746281830214352337622013473019245081834854781277565706545720492282616488950731291974328672252657631353765496979142830459889682475397686651923318015627694176893643969864689257620026916615305397\"\r\n\r\ngeneratePattern = (pos) ->\r\n    for _ in [0...pos-1]\r\n        yield 0\r\n    for n in [1, 0, -1]\r\n        for _ in [0...pos]\r\n            yield n\r\n    while true\r\n        for n in [0, 1, 0, -1]\r\n            for _ in [0...pos]\r\n                yield n\r\n\r\ndigitFinder = (input) ->\r\n    len = input.length\r\n    answers = {}\r\n    for i in [1..100]\r\n        answers[i] = {}\r\n    getDigitAt = (phase, pos) ->\r\n        if pos > len\r\n            throw \"Exceeded length of array #{len} with position #{pos}\"\r\n        if pos is len-1\r\n            return Number input.at(pos)\r\n        else if phase is 0\r\n            return Number input.at(pos)\r\n        else if answers[phase][pos]?\r\n            return answers[phase][pos]\r\n        else\r\n            #console.log \"recursing (getDigitAt(#{phase-1}, #{pos}) + getDigitAt(#{phase}, #{pos+1}))\"\r\n            return answers[phase][pos] = (getDigitAt(phase-1, pos) + getDigitAt(phase, pos+1)) % 10\r\n\r\napplyPhase = (digits, len) ->\r\n    rs = []\r\n    for i in [0...len]\r\n        pattern = generatePattern(i+1)\r\n        sum = 0\r\n        dn = 0\r\n        for n from pattern\r\n            if dn >= len\r\n                break\r\n            sum += n * digits[dn % digits.length]\r\n            dn++\r\n        last = Array.from(\"#{sum}\").pop()\r\n        rs.push Number last\r\n    rs\r\n\r\nclass repeatArray\r\n    constructor: (@orig) ->\r\n        @length = @orig.length * 10000\r\n    at: (pos) ->\r\n        return @orig[pos % @orig.length]\r\n\r\none = (input) ->\r\n    digits = Array.from(input)\r\n    for _ in [1..100]\r\n        digits = applyPhase(digits, digits.length)\r\n        console.log \"Phase #{_}: #{digits.join('')} \"\r\n    digits[..7].join(\"\")\r\n\r\ntwo = (input) ->\r\n    original = Array.from(input)\r\n    digits = new repeatArray(original)\r\n    solver = digitFinder(digits)\r\n    offset = Number original[...7].join(\"\")\r\n    answer = []\r\n    for i in [digits.length - 2...offset+7]\r\n        solver(100, i)\r\n    for i in [offset..offset+7]\r\n        answer.push solver(100, i)\r\n    answer.join(\"\")\r\n    \r\nconsole.log one input \r\nconsole.log two input "
  ]
}