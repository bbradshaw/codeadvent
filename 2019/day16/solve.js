// Generated by CoffeeScript 2.4.1
(function() {
  var applyPhase, digitFinder, generatePattern, input, one, repeatArray, two;

  input = "59796737047664322543488505082147966997246465580805791578417462788780740484409625674676660947541571448910007002821454068945653911486140823168233915285229075374000888029977800341663586046622003620770361738270014246730936046471831804308263177331723460787712423587453725840042234550299991238029307205348958992794024402253747340630378944672300874691478631846617861255015770298699407254311889484508545861264449878984624330324228278057377313029802505376260196904213746281830214352337622013473019245081834854781277565706545720492282616488950731291974328672252657631353765496979142830459889682475397686651923318015627694176893643969864689257620026916615305397";

  generatePattern = function*(pos) {
    var _, j, k, l, len1, n, ref, ref1, ref2, results;
    for (_ = j = 0, ref = pos - 1; (0 <= ref ? j < ref : j > ref); _ = 0 <= ref ? ++j : --j) {
      yield 0;
    }
    ref1 = [1, 0, -1];
    for (k = 0, len1 = ref1.length; k < len1; k++) {
      n = ref1[k];
      for (_ = l = 0, ref2 = pos; (0 <= ref2 ? l < ref2 : l > ref2); _ = 0 <= ref2 ? ++l : --l) {
        yield n;
      }
    }
    results = [];
    while (true) {
      results.push((yield* (function*() {
        var len2, m, ref3, results1;
        ref3 = [0, 1, 0, -1];
        results1 = [];
        for (m = 0, len2 = ref3.length; m < len2; m++) {
          n = ref3[m];
          results1.push((yield* (function*() {
            var o, ref4, results2;
            results2 = [];
            for (_ = o = 0, ref4 = pos; (0 <= ref4 ? o < ref4 : o > ref4); _ = 0 <= ref4 ? ++o : --o) {
              results2.push((yield n));
            }
            return results2;
          })()));
        }
        return results1;
      })()));
    }
    return results;
  };

  digitFinder = function(input) {
    var answers, getDigitAt, i, j, len;
    len = input.length;
    answers = {};
    for (i = j = 1; j <= 100; i = ++j) {
      answers[i] = {};
    }
    return getDigitAt = function(phase, pos) {
      if (pos > len) {
        throw `Exceeded length of array ${len} with position ${pos}`;
      }
      if (pos === len - 1) {
        return Number(input.at(pos));
      } else if (phase === 0) {
        return Number(input.at(pos));
      } else if (answers[phase][pos] != null) {
        return answers[phase][pos];
      } else {
        //console.log "recursing (getDigitAt(#{phase-1}, #{pos}) + getDigitAt(#{phase}, #{pos+1}))"
        return answers[phase][pos] = (getDigitAt(phase - 1, pos) + getDigitAt(phase, pos + 1)) % 10;
      }
    };
  };

  applyPhase = function(digits, len) {
    var dn, i, j, last, n, pattern, ref, rs, sum;
    rs = [];
    for (i = j = 0, ref = len; (0 <= ref ? j < ref : j > ref); i = 0 <= ref ? ++j : --j) {
      pattern = generatePattern(i + 1);
      sum = 0;
      dn = 0;
      for (n of pattern) {
        if (dn >= len) {
          break;
        }
        sum += n * digits[dn % digits.length];
        dn++;
      }
      last = Array.from(`${sum}`).pop();
      rs.push(Number(last));
    }
    return rs;
  };

  repeatArray = class repeatArray {
    constructor(orig) {
      this.orig = orig;
      this.length = this.orig.length * 10000;
    }

    at(pos) {
      return this.orig[pos % this.orig.length];
    }

  };

  one = function(input) {
    var _, digits, j;
    digits = Array.from(input);
    for (_ = j = 1; j <= 100; _ = ++j) {
      digits = applyPhase(digits, digits.length);
      console.log(`Phase ${_}: ${digits.join('')} `);
    }
    return digits.slice(0, 8).join("");
  };

  two = function(input) {
    var answer, digits, i, j, k, offset, original, ref, ref1, ref2, ref3, solver;
    original = Array.from(input);
    digits = new repeatArray(original);
    solver = digitFinder(digits);
    offset = Number(original.slice(0, 7).join(""));
    answer = [];
    for (i = j = ref = digits.length - 2, ref1 = offset + 7; (ref <= ref1 ? j < ref1 : j > ref1); i = ref <= ref1 ? ++j : --j) {
      solver(100, i);
    }
    for (i = k = ref2 = offset, ref3 = offset + 7; (ref2 <= ref3 ? k <= ref3 : k >= ref3); i = ref2 <= ref3 ? ++k : --k) {
      answer.push(solver(100, i));
    }
    return answer.join("");
  };

  console.log(one(input));

  console.log(two(input));

}).call(this);

//# sourceMappingURL=solve.js.map
