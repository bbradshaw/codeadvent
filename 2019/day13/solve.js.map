{
  "version": 3,
  "file": "solve.js",
  "sourceRoot": "..\\..",
  "sources": [
    "2019\\day13\\solve.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\r\nfs = require('fs')\r\ninput = fs.readFileSync('input.txt', 'utf-8')\r\n\r\n\r\nparseInput = (input) ->\r\n    Number(x) for x in input.replace(/\\n$/, \"\").split(',')\r\n\r\nsparseArrayWithDefault = (_default) ->\r\n    @extra_keys = {}\r\n    @get = (obj, prop) ->\r\n        if prop >= obj.length\r\n            if prop in @extra_keys\r\n                return @extra_keys[prop]\r\n            else\r\n                return _default\r\n        else\r\n            return obj[prop]\r\n    \r\n    @set = (obj, key, val) ->\r\n        if key >= obj.length\r\n            @extra_keys[key] = val\r\n        else\r\n            obj[key] = val\r\n        true\r\n\r\nclass CPU\r\n    constructor: (program) ->\r\n        @ip = 0\r\n        @rel_base = 0\r\n        @should_run = true\r\n        @program = new Proxy([program...], new sparseArrayWithDefault(0))\r\n        @callbacks = {}\r\n        @async = true\r\n        @cycleDelay = 0\r\n    \r\n    run: ->\r\n        doRun = () =>\r\n            if @should_run\r\n                @step()\r\n                if @cycleDelay > 0\r\n                    setTimeout doRun, @cycleDelay\r\n                else\r\n                    setImmediate doRun\r\n        if @async\r\n                setImmediate doRun\r\n        else\r\n            while @should_run\r\n                @step()\r\n    \r\n    error: (err) ->\r\n        if @callbacks.error?()\r\n            callback.error(err)\r\n        else\r\n            throw new Error err\r\n\r\n    input: -> \r\n        if not @callbacks.input?\r\n            @error(\"no input callback and input required\")\r\n        @callbacks.input (err, data) ->\r\n            if err?\r\n                @error err\r\n            return data\r\n\r\n    output: (out) -> \r\n        if@callbacks.output?\r\n            @callbacks.output out\r\n        else\r\n            console.log(\"  Output: #{out}\")\r\n\r\n    on: (evtName, cb) ->\r\n        @callbacks[evtName] = cb\r\n    \r\n    halt: ->\r\n        @should_run = false\r\n        if @callbacks.halt?\r\n            @callbacks.halt @ip\r\n        else\r\n            console.log(\"halted!\")\r\n    \r\n    parameter: (pos) ->\r\n        this_mode = @mode[pos]\r\n        switch this_mode\r\n            when 0 then @program[@program[@ip + pos]]\r\n            when 1 then @program[@ip + pos]\r\n            when 2 then @program[@program[@ip + pos] + @rel_base]\r\n            else throw new Error(\"Unknown parameter mode #{this_mode}\")\r\n    \r\n    setParameter: (pos, val) ->\r\n        this_mode = @mode[pos]\r\n        switch this_mode\r\n            when 0 then @program[@program[@ip + pos]] = val\r\n            when 2 then @program[@program[@ip + pos] + @rel_base] = val\r\n            else throw new Error(\"Unknown setParameter mode #{this_mode}\")\r\n\r\n    decodeOpcode: ->\r\n        raw = @program[@ip].toString().padStart(5, '0')\r\n        opcode = Number(raw[3..])\r\n        modes = \r\n            1 : Number(raw[2])\r\n            2 : Number(raw[1])\r\n            3 : Number(raw[0])\r\n        return [opcode, modes]\r\n    \r\n    step: ->\r\n        [opcode, @mode] = @decodeOpcode()\r\n        switch opcode\r\n            when 1\r\n                @setParameter(3, @parameter(1) + @parameter(2))\r\n                @ip += 4\r\n            when 2\r\n                @setParameter(3, @parameter(1) * @parameter(2))\r\n                @ip += 4\r\n            when 3\r\n                @setParameter(1, @input())\r\n                @ip += 2\r\n            when 4\r\n                @output(@parameter(1))\r\n                @ip += 2\r\n            when 5\r\n                if @parameter(1) isnt 0\r\n                    @ip = @parameter(2)\r\n                else\r\n                    @ip += 3\r\n            when 6\r\n                if @parameter(1) is 0\r\n                    @ip = @parameter(2)\r\n                else\r\n                    @ip += 3\r\n            when 7\r\n                if @parameter(1) < @parameter(2)\r\n                    @setParameter(3, 1)\r\n                else\r\n                    @setParameter(3, 0)\r\n                @ip += 4\r\n            when 8\r\n                if @parameter(1) is @parameter(2)\r\n                    @setParameter(3, 1)\r\n                else\r\n                    @setParameter(3, 0)\r\n                @ip += 4\r\n            when 9\r\n                @rel_base += @parameter(1)\r\n                @ip += 2\r\n            when 99\r\n                @halt()\r\n            else throw new Error(\"Unknown opcode #{opcode} at position #{@ip}!\")\r\n\r\nclass Grid\r\n    constructor: () ->\r\n        @map = new Map()\r\n        @max = [-Infinity, -Infinity]\r\n        @min = [Infinity, Infinity]\r\n    \r\n    get: (x, y) ->\r\n        serial = \"#{x},#{y}\"\r\n        @map.get serial\r\n    \r\n    recordSpecial: (x, y, val) ->\r\n        switch(val)\r\n            when 3 then @ball = [x,y]\r\n            when 4 then @paddle = [x,y]\r\n\r\n    set: (x, y, val) ->\r\n        serial = \"#{x},#{y}\"\r\n        @map.set \"#{x},#{y}\", val\r\n        x= Number(x)\r\n        y= Number(y)\r\n        if x is -1 and y is 0 and val isnt 0\r\n            @score = val\r\n            return\r\n        @recordSpecial(x,y,val)\r\n        if x > @max[0]\r\n            @max[0] = x\r\n        if y > @max[1]\r\n            @max[1] = y\r\n        if x < @min[0]\r\n            @min[0] = x\r\n        if y < @min[1]\r\n           @min[1] = y\r\n\r\n    deserial: (str) ->\r\n        [x,y] = str.split(\",\")\r\n        return [Number(x), Number(y)]\r\n    \r\n    keys: ->\r\n        for k from @map.keys()\r\n            @deserial k\r\n    \r\n    print: ->\r\n        for y in [@min[1]..@max[1]]\r\n            line = []\r\n            for x in [@min[0]..@max[0]]\r\n                line.push switch @get(x, y)\r\n                    when 0 then \" \"\r\n                    when 1 then \"+\"\r\n                    when 2 then \"#\"\r\n                    when 3 then \"_\"\r\n                    when 4 then \"*\"\r\n            console.log line.join \"\"\r\n            line.length = 0\r\n        console.log \"Score #{@score}\"\r\n\r\none = (problem, answer_cb) ->\r\n    cpu = new CPU(problem)\r\n    screen = new Grid\r\n    buffer = []\r\n    cpu.on 'output', (data) ->\r\n        buffer.push data\r\n        if buffer.length > 2\r\n            screen.set(buffer[0], buffer[1], Number(buffer[2]))\r\n            buffer.length = 0\r\n    cpu.on 'halt', (ip) ->\r\n        console.log \"Halted at instruction #{ip}!\"\r\n        answer = 0\r\n        for [x,y] in screen.keys()\r\n            if x >= 0 and y >=0 and screen.get(x,y) == 2\r\n                answer +=1\r\n        screen.print()\r\n        console.log \"Grid dimensions #{screen.min[0]} - #{screen.max[0]}, #{screen.min[1]} - #{screen.max[1]}.\"\r\n        answer_cb(answer)\r\n    cpu.run()\r\n   \r\n\r\ntwo = (problem) ->\r\n    cpu = new CPU(problem)\r\n    screen = new Grid\r\n    buffer = []\r\n    cpu.program[0] = 2\r\n    cpu.on 'output', (data) ->\r\n        buffer.push data\r\n        if buffer.length > 2\r\n            screen.set(buffer[0], buffer[1], Number(buffer[2]))\r\n            buffer.length = 0\r\n            process.stdout.write('\\u001B[2J\\u001B[0;0f')\r\n            screen.print()\r\n            cpu.outputDelay = 10\r\n    cpu.on 'input', (cb) ->\r\n        ballx = screen.ball[0]\r\n        paddlex = screen.paddle[0]\r\n        dir = 0\r\n        if ballx < paddlex \r\n            dir = 1 \r\n        else if ballx > paddlex\r\n            dir = -1\r\n        cb null, dir\r\n    cpu.on 'halt', (ip) ->\r\n        console.log \"Halted at instruction #{ip}!\"\r\n        answer = 0\r\n    cpu.run()\r\n\r\none parseInput(input), (answer) ->\r\n    console.log answer\r\nconsole.log two parseInput input"
  ]
}